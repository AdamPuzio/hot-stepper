!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).HotStepper=t()}(this,(function(){"use strict";class e{constructor(e){this.wizard=e,this.steps=this.getSteps(),this.stepsQuantity=this.getStepsQuantity(),this.currentStep=0,this.addStepClasses()}setCurrentStep(e){this.currentStep=e,this.handleStepsClasses()}getSteps(){return this.wizard.getElementsByClassName("step")}getStepsQuantity(){return this.getSteps().length}addStepClasses(){for(let e=0;e<this.steps.length;e++){let t=this.steps[e].querySelector(".step-content");if(t){let s=0==e?'<div class="line -start"></div>':"";t.innerHTML+=`<svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">\n              <circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none"/>\n              <path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8"/>\n            </svg>\n            <div class="lines">\n              ${s}\n              <div class="line -background"></div>\n              <div class="line -progress"></div>\n            </div> `}}}handleConcludeStep(){this.steps[this.currentStep].classList.add("-completed")}handleStepsClasses(){for(let e=0;e<this.steps.length;e++){let t=this.steps[e];this.currentStep>e?t.classList.add("-completed"):t.classList.remove("-completed")}}handleStepsClassesOLD(e){e>0?this.steps[this.currentStep-1].classList.add("-completed"):e<0&&this.steps[this.currentStep].classList.remove("-completed")}}class t{constructor(e){this.wizard=e,this.panelWidth=this.wizard.offsetWidth,this.panelsContainer=this.getPanelsContainer(),this.panels=this.getPanels(),this.panelComplete=this.getPanelComplete(),this.currentStep=0,this.updatePanelsPosition(this.currentStep),this.updatePanelsContainerHeight()}getCurrentPanelHeight(e){return document.querySelector(".panel.movingIn").offsetHeight+"px"}getPanelsContainer(){return this.wizard.querySelector(".hs-body")}getPanels(){return this.wizard.getElementsByClassName("panel")}getPanelComplete(){return this.wizard.querySelector(".panel.complete")}addPanelClasses(){this.panelsContainer.innerHTML+='<div class="hs-mask">\n      <div class="hs-loader"><div></div><div></div><div></div></div>\n    </div>'}updatePanelsContainerHeight(){this.getPanelsContainer().style.height=this.getCurrentPanelHeight()}updatePanelsPosition(e){const t=this.panels;this.panelWidth;for(let s=0;s<t.length;s++)t[s].classList.remove("movingIn","movingOutBackward","movingOutForward"),s!==e?s<e?t[s].classList.add("movingOutBackward"):s>e&&t[s].classList.add("movingOutForward"):t[s].classList.add("movingIn");this.updatePanelsContainerHeight()}updatePanelsComplete(){if(!this.getPanelComplete())return;const e=this.panels;this.panelWidth;for(let t=0;t<e.length;t++)e[t].classList.remove("movingIn","movingOutBackward","movingOutForward"),e[t].classList.contains("complete")?e[t].classList.add("movingIn"):e[t].classList.add("movingOutBackward");this.updatePanelsContainerHeight()}setCurrentStep(e){this.currentStep=e,this.updatePanelsPosition(e)}}const s={linear:!0,animation:!1,selectors:{steps:".step",trigger:".step-trigger",stepper:".bs-stepper"},onChange:async function(e){return!0},onComplete:async function(){return!0},onReset:async function(){return!0}};return class{constructor(n,i={}){this._element=n,this._currentIndex=0,this._stepsCount=0,this._stepsContents=[],this._elements={},this.options={...s,...i},this.options.selectors={...s.selectors,...this.options.selectors},this.panels=new t(this._element),this.steps=new e(this._element),this._stepsCount=this.steps.getStepsQuantity(),this.addClasses(),this.addHandlers(),this.addListeners()}async next(){let e,t={stepFrom:this._currentIndex,stepTo:this._currentIndex+1,totalSteps:this._stepsCount,move:"forward"};return this._currentIndex+1>=this._stepsCount?(t.move="complete",e=await this.onComplete(t),!1!==e&&(this._currentIndex=this._stepsCount,this.steps.setCurrentStep(this._currentIndex),this.panels.updatePanelsComplete(),this.manageHandlers(t),void await this.complete())):(e=await this.onChange(t),!1!==e&&(this._currentIndex+=1,this.steps.setCurrentStep(this._currentIndex),this.panels.setCurrentStep(this._currentIndex),this.manageHandlers(t),void this.resize()))}async previous(){if(this._currentIndex-1<0)return;let e={stepFrom:this._currentIndex,stepTo:this._currentIndex-1,totalSteps:this._stepsCount,move:"backward"};if(!1===await this.onChange(e))return!1;this._currentIndex-=1,this.steps.setCurrentStep(this._currentIndex),this.panels.setCurrentStep(this._currentIndex),this.manageHandlers(e),this.resize()}async reset(){let e={stepFrom:this._currentIndex,stepTo:0,totalSteps:this._stepsCount,move:"reset"};if(!1===await this.onReset(e))return!1;this._currentIndex=0,this.steps.setCurrentStep(this._currentIndex),this.panels.setCurrentStep(this._currentIndex),this.manageHandlers(e),this.resize()}complete(){!0===this.options.animation&&this._element.classList.add("completed"),this._elements.btnPrev&&(this._elements.btnPrev.disabled=!0),this._elements.btnNext&&(this._elements.btnNext.disabled=!0)}async onChange(e){this._element.classList.add("loading");let t=await this.options.onChange.bind(this)(e);return this._element.classList.remove("loading"),t}async onComplete(e){this._element.classList.add("loading");let t=await this.options.onComplete.bind(this)(e);return this._element.classList.remove("loading"),t}async onReset(e){this._element.classList.add("loading");let t=await this.options.onReset.bind(this)(e);return this._element.classList.remove("loading"),t}addClasses(){this._element.innerHTML+='<div class="hs-mask">\n      <div class="hs-loader"><div></div><div></div><div></div></div>\n    </div>'}addHandlers(){let e=this._element.querySelector(".hs-footer");e&&(this._elements.btnNext=e.querySelector(".btn-next"),this._elements.btnPrev=e.querySelector(".btn-prev"),this._elements.btnPrev&&(this._elements.btnPrev.disabled=!0))}manageHandlers(e){this._elements.btnPrev&&(this._elements.btnPrev.disabled=!1),this._elements.btnNext&&(this._elements.btnNext.disabled=!1),0==e.stepTo&&this._elements.btnPrev&&(this._elements.btnPrev.disabled=!0),"complete"==e.move&&this._elements.btnNext&&(this._elements.btnNext.disabled=!0)}addListeners(){window.addEventListener("resize",this.resize)}resize(){this.panels.updatePanelsContainerHeight()}updatePanel(e,t){let s=this.panels.panels[e-1];this.updateEl(s,t)}updateEl(e,t){"string"==typeof e&&(e=document.querySelector(e));e.innerHTML=t,Array.from(e.querySelectorAll("script")).forEach(e=>{const t=document.createElement("script");Array.from(e.attributes).forEach(e=>t.setAttribute(e.name,e.value)),t.appendChild(document.createTextNode("(function(){ "+e.innerHTML+" })()")),e.parentNode.replaceChild(t,e)}),this.resize()}}}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
